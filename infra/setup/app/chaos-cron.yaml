---
apiVersion: v1
kind: Namespace
metadata:
  name: sre-challenge-chaos
  labels:
    purpose: chaos-testing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: sre-challenge
  name: pod-killer-role
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["pods"]
    verbs: ["get", "list", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: sre-challenge
  name: pod-killer-rolebinding
subjects:
  - kind: ServiceAccount
    name: default
    namespace: sre-challenge-chaos
roleRef:
  kind: Role
  name: pod-killer-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: node-app-random-pod-killer
  namespace: sre-challenge-chaos
spec:
  schedule: "* * * * *" # Run every minute
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: pod-killer
              image: bitnami/kubectl:latest # Lightweight image with kubectl
              command:
                - /bin/bash
                - -c
                - |
                  # Get all running pods for the node-app
                  PODS=$(kubectl get pods -n sre-challenge -l app=node-app -o jsonpath='{.items[*].metadata.name}')

                  # Convert the list of pods into an array
                  POD_ARRAY=($PODS)

                  # Get the count of pods
                  POD_COUNT=${#POD_ARRAY[@]}

                  # Randomly select one pod to delete
                  if [ $POD_COUNT -gt 0 ]; then
                    RANDOM_INDEX=$((RANDOM % POD_COUNT))
                    TARGET_POD=${POD_ARRAY[$RANDOM_INDEX]}
                    echo "Deleting pod: $TARGET_POD"
                    kubectl delete pod -n sre-challenge $TARGET_POD
                  else
                    echo "No pods found for deletion."
                  fi
          restartPolicy: OnFailure